name: Cross-platform Shell Testing

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        include:
          # Linux targets
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]
          
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]
            setup: |
              sudo apt-get update
              sudo apt-get install -y \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libc6-dev-arm64-cross
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          
          # macOS targets
          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: [bash, zsh, fish]
          
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            shell: [bash, zsh, fish]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    # Install Rust and target
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    # Setup cross-compilation if needed
    - name: Setup cross-compilation
      if: matrix.setup
      run: ${{ matrix.setup }}
    
    # Install shell being tested
    - name: Install shell
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          case "${{ matrix.shell }}" in
            bash|zsh)
              sudo apt-get install -y ${{ matrix.shell }} ;;
            fish)
              sudo apt-get install -y fish ;;
            ksh)
              sudo apt-get install -y ksh ;;
          esac
        else  # macOS
          case "${{ matrix.shell }}" in
            fish)
              brew install fish ;;
          esac
        fi
    
    # Build the project
    - name: Build
      run: cargo build --target ${{ matrix.target }} --release
    
    # Create test history file
    - name: Setup test history
      run: |
        mkdir -p ~/.local/share/fish  # For fish history
        echo "echo 'test command'" > test_history
        
        case "${{ matrix.shell }}" in
          fish)
            echo "- cmd: echo 'test command'" > ~/.local/share/fish/fish_history ;;
          ksh)
            cp test_history ~/.sh_history ;;
          bash)
            cp test_history ~/.bash_history ;;
          zsh)
            cp test_history ~/.zsh_history ;;
        esac
    
    # Run tests
    - name: Test with ${{ matrix.shell }} on ${{ matrix.platform }}
      run: |
        echo "Testing ${{ matrix.shell }} on ${{ matrix.platform }}"
        ./target/${{ matrix.target }}/release/past --brief
        ./target/${{ matrix.target }}/release/past -s "test"
        
        # Verify basic functionality
        ./target/${{ matrix.target }}/release/past --brief | grep -q "Commands: 1" || (echo "Command count mismatch" && exit 1)
        ./target/${{ matrix.target }}/release/past -s "test" | grep -q "test command" || (echo "Search failed" && exit 1)
