---
name: Cross-platform Shell Testing

on:
  push:
    branches: [main]
  pull_request:

jobs:
  shell-tests:
    strategy:
      matrix:
        include:
          # Linux targets
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]

          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]

          # macOS targets
          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: [bash, zsh, fish]

          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            shell: [bash, zsh, fish]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    # Install Rust
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # Setup ARM cross-compilation for Linux
    - name: Setup ARM toolchain (Linux)
      if: matrix.platform == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    # Install shells
    - name: Install shell (${{ matrix.shell }})
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          case "${{ matrix.shell }}" in
            bash|zsh|ksh)
              sudo apt-get install -y ${{ matrix.shell }} ;;
            fish)
              sudo apt-get install -y fish ;;
          esac
        else
          case "${{ matrix.shell }}" in
            fish)
              brew install fish ;;
          esac
        fi

    # Build the project
    - name: Build
      run: cargo build --target ${{ matrix.target }} --release

    # Setup test environment
    - name: Setup test history
      run: |
        # Create config file
        mkdir -p ~/.config
        cat > ~/.pastrc <<EOF
[shell]
shell_type = "${{ matrix.shell }}"
config_file = "${{ matrix.shell == 'fish' && '.config/fish/config.fish' || '.${matrix.shell}rc' }}"
EOF

        # Create test history
        case "${{ matrix.shell }}" in
          fish)
            mkdir -p ~/.local/share/fish
            echo "- cmd: echo 'test_command_1'
- cmd: ls -l
- cmd: git status" > ~/.local/share/fish/fish_history ;;
          ksh)
            echo "echo 'test_command_1'
ls -l
git status" > ~/.sh_history ;;
          bash)
            echo "echo 'test_command_1'
ls -l
git status" > ~/.bash_history ;;
          zsh)
            echo "echo 'test_command_1'
ls -l
git status" > ~/.zsh_history ;;
        esac

    # Run basic tests
    - name: Run tests
      run: |
        # Install jq for JSON validation
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get install -y jq
        else
          brew install jq
        fi

        BIN="./target/${{ matrix.target }}/release/past"

        echo "=== TEST 1: Basic execution ==="
        $BIN --brief || (echo "Basic execution failed" && exit 1)

        echo "=== TEST 2: Command count ==="
        $BIN --brief | grep -q "Commands:" || (echo "Command count check failed" && exit 1)

        echo "=== TEST 3: Keyword search ==="
        $BIN -s "test_command" | grep -q "test_command_1" || (echo "Keyword search failed" && exit 1)

        echo "=== TEST 4: JSON output ==="
        $BIN --json | jq . || (echo "JSON output invalid" && exit 1)

        echo "All tests passed for ${{ matrix.shell }} on ${{ matrix.platform }}"
