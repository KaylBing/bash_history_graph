name: Cross-platform Shell Testing

on:
  push:
    branches: [main]
  pull_request:

jobs:
  shell-tests:
    strategy:
      matrix:
        include:
          # Linux targets
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]
          
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            shell: [bash, zsh, fish, ksh]
            setup: |
              sudo apt-get update
              sudo apt-get install -y \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libc6-dev-arm64-cross
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          
          # macOS targets
          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: [bash, zsh, fish]
          
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            shell: [bash, zsh, fish]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    # Install Rust and target
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    # Setup cross-compilation if needed
    - name: Setup cross-compilation
      if: matrix.setup
      run: ${{ matrix.setup }}
    
    # Install shell being tested
    - name: Install shell
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          case "${{ matrix.shell }}" in
            bash|zsh|ksh)
              sudo apt-get install -y ${{ matrix.shell }} ;;
            fish)
              sudo apt-get install -y fish ;;
          esac
        else  # macOS
          case "${{ matrix.shell }}" in
            bash)
              brew install bash
              sudo chsh -s /usr/local/bin/bash $USER ;;
            zsh)
              : # zsh comes with macOS ;;
            fish)
              brew install fish ;;
          esac
        fi
    
    # Build the project
    - name: Build
      run: cargo build --target ${{ matrix.target }} --release
    
    # Configure test environment
    - name: Setup test environment
      run: |
        # Create config file to avoid interactive prompt
        mkdir -p ~/.config/past
        CONFIG_FILE=~/.pastrc
        echo "[shell]" > $CONFIG_FILE
        echo "shell_type = \"${{ matrix.shell }}\"" >> $CONFIG_FILE
        echo "config_file = \"${{ matrix.shell == 'fish' && '.config/fish/config.fish' || '.${matrix.shell}rc' }\"" >> $CONFIG_FILE

        # Create test history
        case "${{ matrix.shell }}" in
          fish)
            mkdir -p ~/.local/share/fish
            echo "- cmd: echo 'test_command_1'
- cmd: ls -l
- cmd: git status
- cmd: cargo build" > ~/.local/share/fish/fish_history ;;
          ksh)
            echo "echo 'test_command_1'
ls -l
git status
cargo build" > ~/.sh_history ;;
          bash)
            echo "echo 'test_command_1'
ls -l
git status
cargo build" > ~/.bash_history 
            # For immediate availability on Linux
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              history -s "echo 'test_command_1'"
              history -s "ls -l"
              history -s "git status"
              history -s "cargo build"
            fi ;;
          zsh)
            echo "echo 'test_command_1'
ls -l
git status
cargo build" > ~/.zsh_history
            # For immediate availability on Linux
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              zsh -c "print -s \"echo 'test_command_1'\""
              zsh -c "print -s \"ls -l\""
              zsh -c "print -s \"git status\""
              zsh -c "print -s \"cargo build\""
            fi ;;
        esac
    
    # Test Cases
    - name: Run test suite
      run: |
        BIN_PATH="./target/${{ matrix.target }}/release/past"
        
        echo "=== TEST 1: Verify shell detection ==="
        $BIN_PATH --brief | grep -q "Analyzing your command history" || \
          (echo "Failed basic execution" && exit 1)
        
        echo "=== TEST 2: Verify command count ==="
        $BIN_PATH --brief | grep -q "Commands: [1-9]" || \
          (echo "Command count mismatch" && exit 1)
        
        echo "=== TEST 3: Test keyword search ==="
        $BIN_PATH -s "test_command" | grep -q "test_command_1" || \
          (echo "Keyword search failed" && exit 1)
        
        echo "=== TEST 4: Test category search ==="
        $BIN_PATH -C "File" | grep -q "ls -l" || \
          (echo "Category search failed" && exit 1)
        
        echo "=== TEST 5: Test VCS commands ==="
        $BIN_PATH -C "Version" | grep -q "git status" || \
          (echo "VCS command detection failed" && exit 1)
        
        echo "=== TEST 6: Test bare output ==="
        $BIN_PATH --bare | grep -q "COMMAND STATISTICS" || \
          (echo "Bare output format failed" && exit 1)
        
        echo "=== TEST 7: Test detailed analysis ==="
        $BIN_PATH --detailed | grep -q "DETAILED ANALYSIS" || \
          (echo "Detailed output format failed" && exit 1)
        
        echo "=== TEST 8: Test JSON output ==="
        $BIN_PATH --json | jq empty || \
          (echo "JSON output validation failed" && exit 1)
        
        echo "All tests passed for ${{ matrix.shell }} on ${{ matrix.platform }}"
