---
name: Cross-platform Shell Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  shell-tests:
    strategy:
      matrix:
        include:
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: bash

          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: zsh

          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: fish

          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: ksh

          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            shell: bash

          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: bash

          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: zsh

          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            shell: fish
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup ARM toolchain
        if: matrix.platform == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=" \
            "aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install shell
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.shell }}
          else
            if [[ "${{ matrix.shell }}" == "fish" ]]; then
              brew install fish
            fi
          fi

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Create test history
        run: |
          mkdir -p ~/.config
          echo "[shell]" > ~/.pastrc
          echo "shell_type = \"${{ matrix.shell }}\"" >> ~/.pastrc

          if [[ "${{ matrix.shell }}" == "fish" ]]; then
            config_file=".config/fish/config.fish"
          else
            config_file=".${{ matrix.shell }}rc"
          fi
          echo "config_file = \"$config_file\"" >> ~/.pastrc

          if [[ "${{ matrix.shell }}" == "fish" ]]; then
            mkdir -p ~/.local/share/fish
            echo "- cmd: echo test_command_1" > fish_hist
            echo "  when: 1650000000" >> fish_hist
            echo "- cmd: ls -l" >> fish_hist
            echo "  when: 1650000001" >> fish_hist
            mv fish_hist ~/.local/share/fish/fish_history
          else
            echo "echo test_command_1" > shell_hist
            echo "ls -l" >> shell_hist
            echo "git status" >> shell_hist
            echo "cargo build" >> shell_hist
            mv shell_hist ~/.${matrix.shell}_history
            if [[ "${{ matrix.shell }}" == "bash" ]]; then
              history -s "echo test_command_1"
              history -s "ls -l"
            fi
          fi

      - name: Run tests
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get install -y jq
          else
            brew install jq
          fi

          bin_path="./target/${{ matrix.target }}/release/past"

          $bin_path --brief || exit 1
          $bin_path -s "test_command" | grep -q "test_command_1" || exit 1
          $bin_path --json | jq empty || exit 1
